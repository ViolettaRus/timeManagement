import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useDispatch } from 'react-redux';
import { register } from '../../store/slices/authSlice';
import {
  Container,
  Card,
  Form,
  FormControl,
  Label,
  Input,
  Button,
  ErrorText
} from '../../components/UI';
import styled from 'styled-components';

const schema = yup.object().shape({
  username: yup.string().required('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  email: yup.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').required('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  password: yup.string().min(6, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤').required('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  confirmPassword: yup.string()
    .oneOf([yup.ref('password'), null], '–ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å')
    .required('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
});

const AuthContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 80vh;
  padding: ${props => props.theme.spacing?.(8) || '32px'} 0;
`;

const AuthCard = styled(Card)`
  width: 100%;
  max-width: 400px;
  padding: ${props => props.theme.spacing?.(8) || '32px'};
  text-align: center;
`;

const AuthHeader = styled.div`
  margin-bottom: ${props => props.theme.spacing?.(6) || '24px'};
`;

const AuthIcon = styled.div`
  font-size: 3rem;
  margin-bottom: ${props => props.theme.spacing?.(3) || '12px'};
  color: ${props => props.theme.colors?.primary?.[500] || '#0ea5e9'};
`;

const AuthTitle = styled.h1`
  font-size: ${props => props.theme.typography?.fontSize?.['2xl'] || '24px'};
  margin-bottom: ${props => props.theme.spacing?.(2) || '8px'};
  color: ${props => props.theme.colors?.text?.primary || '#18181b'};
`;

const AuthForm = styled(Form)`
  display: flex;
  flex-direction: column;
  gap: ${props => props.theme.spacing?.(4) || '16px'};
`;

const AuthFooter = styled.div`
  margin-top: ${props => props.theme.spacing?.(6) || '24px'};
  padding-top: ${props => props.theme.spacing?.(4) || '16px'};
  border-top: 1px solid ${props => props.theme.colors?.border?.light || '#e4e4e7'};
`;

const RegisterPage = () => {
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const dispatch = useDispatch();
  
  const { register: formRegister, handleSubmit, formState: { errors, isSubmitting } } = useForm({
    resolver: yupResolver(schema),
  });

  const onSubmit = async (data) => {
    try {
      const { confirmPassword, ...userData } = data;
      const result = await dispatch(register(userData)).unwrap();
      
      if (result.status === 'success') {
        navigate('/', { replace: true });
      }
    } catch (err) {
      setError(err || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π email –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  };

  return (
    <Container>
      <AuthContainer>
        <AuthCard>
          <AuthHeader>
            <AuthIcon>üìù</AuthIcon>
            <AuthTitle>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</AuthTitle>
          </AuthHeader>

          {error && (
            <ErrorText style={{ textAlign: 'center', marginBottom: '16px' }}>
              ‚ö†Ô∏è {error}
            </ErrorText>
          )}

          <AuthForm onSubmit={handleSubmit(onSubmit)}>
            <FormControl>
              <Label htmlFor="username">üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Label>
              <Input
                id="username"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                {...formRegister('username')}
                disabled={isSubmitting}
              />
              {errors.username && <ErrorText>‚ö†Ô∏è {errors.username.message}</ErrorText>}
            </FormControl>

            <FormControl>
              <Label htmlFor="email">üìß Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="your@email.com"
                {...formRegister('email')}
                disabled={isSubmitting}
              />
              {errors.email && <ErrorText>‚ö†Ô∏è {errors.email.message}</ErrorText>}
            </FormControl>

            <FormControl>
              <Label htmlFor="password">üîí –ü–∞—Ä–æ–ª—å</Label>
              <Input
                id="password"
                type="password"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                {...formRegister('password')}
                disabled={isSubmitting}
              />
              {errors.password && <ErrorText>‚ö†Ô∏è {errors.password.message}</ErrorText>}
            </FormControl>

            <FormControl>
              <Label htmlFor="confirmPassword">üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
              <Input
                id="confirmPassword"
                type="password"
                placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                {...formRegister('confirmPassword')}
                disabled={isSubmitting}
              />
              {errors.confirmPassword && <ErrorText>‚ö†Ô∏è {errors.confirmPassword.message}</ErrorText>}
            </FormControl>

            <Button
              type="submit"
              variant="primary"
              size="lg"
              disabled={isSubmitting}
              style={{ marginTop: '8px' }}
            >
              {isSubmitting ? '‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : 'üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
            </Button>
          </AuthForm>

          <AuthFooter>
            <p style={{ margin: 0, color: '#52525b' }}>
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
              <Link 
                to="/login" 
                style={{ 
                  color: '#0ea5e9', 
                  fontWeight: '500',
                  textDecoration: 'underline' 
                }}
              >
                –í–æ–π—Ç–∏
              </Link>
            </p>
          </AuthFooter>
        </AuthCard>
      </AuthContainer>
    </Container>
  );
};

export default RegisterPage;