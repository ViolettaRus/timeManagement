import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { updateUser } from '../../store/slices/authSlice';
import { setTheme } from '../../store/slices/themeSlice';
import {
  Container,
  Card,
  Form,
  FormControl,
  Label,
  Input,
  Select,
  Button,
  ErrorText,
  FlexContainer
} from '../../components/UI';
import { Snackbar } from '../../components/UI/Snackbar';

const SettingsPage = () => {
  const dispatch = useDispatch();
  const { user, loading, error } = useSelector(state => state.auth);
  const currentTheme = useSelector(state => state.theme.mode);
  
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    theme: currentTheme,
    timeFormat: '24h',
    timeUnit: 'hours'
  });
  const [snackbarOpen, setSnackbarOpen] = useState(false);

  useEffect(() => {
    if (user) {
      setFormData({
        username: user.username || '',
        email: user.email || '',
        theme: user.settings?.theme || currentTheme,
        timeFormat: user.settings?.timeFormat || '24h',
        timeUnit: user.settings?.timeUnit || 'hours'
      });
    }
  }, [user, currentTheme]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    if (name === 'theme') {
      dispatch(setTheme(value));
    }
  };

  const handleThemeToggle = () => {
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    dispatch(setTheme(newTheme));
    setFormData(prev => ({ ...prev, theme: newTheme }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const resultAction = await dispatch(updateUser({
      username: formData.username,
      email: formData.email,
      settings: {
        theme: formData.theme,
        timeFormat: formData.timeFormat,
        timeUnit: formData.timeUnit
      }
    }));

    if (updateUser.fulfilled.match(resultAction)) {
      setSnackbarOpen(true);
    }
  };

  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };

  return (
    <Container>
      <Card>
        <h1>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
        
        {error && (
          <ErrorText>{error}</ErrorText>
        )}
        
        <Form onSubmit={handleSubmit}>
          <FormControl>
            <Label>üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Label>
            <Input
              required
              name="username"
              value={formData.username}
              onChange={handleChange}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
            />
          </FormControl>
          
          <FormControl>
            <Label>üìß Email</Label>
            <Input
              required
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
            />
          </FormControl>
          
          <FormControl>
            <FlexContainer justify="space-between" align="center">
              <Label>üé® –¢–µ–º–∞: {formData.theme === 'light' ? '–°–≤–µ—Ç–ª–∞—è' : '–¢—ë–º–Ω–∞—è'}</Label>
              <Button
                type="button"
                variant="outlined"
                onClick={handleThemeToggle}
              >
                {formData.theme === 'light' ? 'üåô –¢—ë–º–Ω–∞—è' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è'}
              </Button>
            </FlexContainer>
            <Select
              name="theme"
              value={formData.theme}
              onChange={handleChange}
              style={{ marginTop: '0.5rem' }}
            >
              <option value="light">–°–≤–µ—Ç–ª–∞—è</option>
              <option value="dark">–¢—ë–º–Ω–∞—è</option>
            </Select>
          </FormControl>
          
          <FormControl>
            <Label>‚è∞ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏</Label>
            <Select
              name="timeFormat"
              value={formData.timeFormat}
              onChange={handleChange}
            >
              <option value="12h">12-—á–∞—Å–æ–≤–æ–π (AM/PM)</option>
              <option value="24h">24-—á–∞—Å–æ–≤–æ–π</option>
            </Select>
          </FormControl>

          <FormControl>
            <Label>üìä –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏</Label>
            <Select
              name="timeUnit"
              value={formData.timeUnit}
              onChange={handleChange}
            >
              <option value="hours">–ß–∞—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)</option>
              <option value="minutes">–ú–∏–Ω—É—Ç—ã</option>
              <option value="seconds">–°–µ–∫—É–Ω–¥—ã</option>
            </Select>
          </FormControl>
          
          <Button
            type="submit"
            variant="primary"
            disabled={loading}
            style={{ marginTop: '1rem' }}
          >
            {loading ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
          </Button>
        </Form>

        <Snackbar
          open={snackbarOpen}
          onClose={handleSnackbarClose}
          message="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
          variant="success"
          autoHideDuration={3000}
        />
      </Card>
    </Container>
  );
};

export default SettingsPage;